/** ******************************************************************************
 *  (c) 2018 - 2023 Zondax AG
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 ******************************************************************************* */

import Zemu from '@zondax/zemu'
import { SeiApp } from '@zondax/ledger-sei'
import { ETH_PATH, defaultOptions, models } from './common'
import { createHash } from 'crypto'
import { ec } from 'elliptic'

const TEST_DATA = [
  {
    name: 'msgSend',
    blob: Buffer.from(
      '7b226163636f756e745f6e756d626572223a2231323237222c22636861696e5f6964223a2261746c616e7469632d32222c22666565223a7b22616d6f756e74223a5b7b22616d6f756e74223a223130303030222c2264656e6f6d223a2275736569227d5d2c22676173223a22313030303030227d2c226d656d6f223a225472616e73666572222c226d736773223a5b7b2274797065223a22636f736d6f732d73646b2f4d736753656e64222c2276616c7565223a7b22616d6f756e74223a5b7b22616d6f756e74223a2231303030303030222c2264656e6f6d223a2275736569227d5d2c2266726f6d5f61646472657373223a22736569313461653467333432327468637975786c6572327773337732356670657372683275716d676d39222c22746f5f61646472657373223a22736569316364767236746e73353077763033656b3934647336766e786837706c33706d6d39616d737475227d7d5d2c2273657175656e6365223a22313833363533227d',
      'hex',
    ),
  },
  {
    name: 'Batched_MsgSend',
    blob: Buffer.from(
      '7b226163636f756e745f6e756d626572223a2231323237222c22636861696e5f6964223a2261746c616e7469632d32222c22666565223a7b22616d6f756e74223a5b7b22616d6f756e74223a223230303030222c2264656e6f6d223a2275736569227d5d2c22676173223a22323030303030227d2c226d656d6f223a225472616e73666572222c226d736773223a5b7b2274797065223a22636f736d6f732d73646b2f4d736753656e64222c2276616c7565223a7b22616d6f756e74223a5b7b22616d6f756e74223a2231303030303030222c2264656e6f6d223a2275736569227d5d2c2266726f6d5f61646472657373223a22736569313461653467333432327468637975786c6572327773337732356670657372683275716d676d39222c22746f5f61646472657373223a22736569316364767236746e73353077763033656b3934647336766e786837706c33706d6d39616d737475227d7d2c7b2274797065223a22636f736d6f732d73646b2f4d736753656e64222c2276616c7565223a7b22616d6f756e74223a5b7b22616d6f756e74223a2231303030303030222c2264656e6f6d223a2275736569227d5d2c2266726f6d5f61646472657373223a22736569313461653467333432327468637975786c6572327773337732356670657372683275716d676d39222c22746f5f61646472657373223a22736569316364767236746e73353077763033656b3934647336766e786837706c33706d6d39616d737475227d7d5d2c2273657175656e6365223a22313833363533227d',
      'hex',
    ),
  },
  {
    name: 'MsgDelegate',
    blob: Buffer.from(
      '7b226163636f756e745f6e756d626572223a2231323237222c22636861696e5f6964223a2261746c616e7469632d32222c22666565223a7b22616d6f756e74223a5b7b22616d6f756e74223a223230303030222c2264656e6f6d223a2275736569227d5d2c22676173223a22323030303030227d2c226d656d6f223a225374616b696e67222c226d736773223a5b7b2274797065223a22636f736d6f732d73646b2f4d736744656c6567617465222c2276616c7565223a7b22616d6f756e74223a5b7b22616d6f756e74223a2231303030303030222c2264656e6f6d223a2275736569227d5d2c2264656c656761746f725f61646472657373223a22736569313461653467333432327468637975786c6572327773337732356670657372683275716d676d39222c2276616c696461746f725f61646472657373223a2273656976616c6f7065723179716172357837656764397138636336393766353877346b65757561336d39343036646b376d227d7d5d2c2273657175656e6365223a22313833363533227d',
      'hex',
    ),
  },
  {
    name: 'MsgUndelegate',
    blob: Buffer.from(
      '7b226163636f756e745f6e756d626572223a2231323237222c22636861696e5f6964223a2261746c616e7469632d32222c22666565223a7b22616d6f756e74223a5b7b22616d6f756e74223a223230303030222c2264656e6f6d223a2275736569227d5d2c22676173223a22323030303030227d2c226d656d6f223a22556e7374616b696e67222c226d736773223a5b7b2274797065223a22636f736d6f732d73646b2f4d7367556e64656c6567617465222c2276616c7565223a7b22616d6f756e74223a5b7b22616d6f756e74223a2231303030303030222c2264656e6f6d223a2275736569227d5d2c2264656c656761746f725f61646472657373223a22736569313461653467333432327468637975786c6572327773337732356670657372683275716d676d39222c2276616c696461746f725f61646472657373223a2273656976616c6f7065723179716172357837656764397138636336393766353877346b65757561336d39343036646b376d227d7d5d2c2273657175656e6365223a22313833363533227d',
      'hex',
    ),
  },
  {
    name: 'MsgBeginRedelegate',
    blob: Buffer.from(
      '7b226163636f756e745f6e756d626572223a2231323237222c22636861696e5f6964223a2261746c616e7469632d32222c22666565223a7b22616d6f756e74223a5b7b22616d6f756e74223a223230303030222c2264656e6f6d223a2275736569227d5d2c22676173223a22323030303030227d2c226d656d6f223a22526564656c65676174696e67222c226d736773223a5b7b2274797065223a22636f736d6f732d73646b2f4d7367426567696e526564656c6567617465222c2276616c7565223a7b22616d6f756e74223a5b7b22616d6f756e74223a2231303030303030222c2264656e6f6d223a2275736569227d5d2c2264656c656761746f725f61646472657373223a22736569313461653467333432327468637975786c6572327773337732356670657372683275716d676d39222c2276616c696461746f725f6473745f61646472657373223a2273656976616c6f706572313770336d6e793930377563667637657577787973387364367a75356b7263636864347363706a222c2276616c696461746f725f7372635f61646472657373223a2273656976616c6f7065723179716172357837656764397138636336393766353877346b65757561336d39343036646b376d227d7d5d2c2273657175656e6365223a22313833363533227d',
      'hex',
    ),
  },
  {
    name: 'MsgExecuteContract',
    blob: Buffer.from(
      '7b226163636f756e745f6e756d626572223a2231323237222c22636861696e5f6964223a2261746c616e7469632d32222c22666565223a7b22616d6f756e74223a5b7b22616d6f756e74223a223230303030222c2264656e6f6d223a2275736569227d5d2c22676173223a22323030303030227d2c226d656d6f223a22436f736d5761736d222c226d736773223a5b7b2274797065223a227761736d2f4d736745786563757465436f6e7472616374222c2276616c7565223a7b22636f6e7472616374223a22736569313867346733356d6879357338386e7368706136666c76706a396578367538386c366d686a6d7a6a63686e72666137787230306a73306773777275222c2266756e6473223a5b5d2c226d7367223a7b22696e6372656d656e74223a7b7d7d2c2273656e646572223a22736569313461653467333432327468637975786c6572327773337732356670657372683275716d676d39227d7d5d2c2273657175656e6365223a22313833363533227d',
      'hex',
    ),
  },
  {
    name: 'MsgMultiSend',
    blob: Buffer.from(
      '7b226163636f756e745f6e756d626572223a2231323237222c22636861696e5f6964223a2261746c616e7469632d32222c22666565223a7b22616d6f756e74223a5b7b22616d6f756e74223a223130303030222c2264656e6f6d223a2275736569227d5d2c22676173223a22313030303030227d2c226d656d6f223a224d756c746973656e64222c226d736773223a5b7b2274797065223a22636f736d6f732d73646b2f4d73674d756c746953656e64222c2276616c7565223a7b22696e70757473223a5b7b2261646472657373223a22736569313461653467333432327468637975786c6572327773337732356670657372683275716d676d39222c22636f696e73223a5b7b22616d6f756e74223a2231303030303030222c2264656e6f6d223a2275736569227d5d7d5d2c226f757470757473223a5b7b2261646472657373223a22736569316364767236746e73353077763033656b3934647336766e786837706c33706d6d39616d737475222c22636f696e73223a5b7b22616d6f756e74223a2231303030303030222c2264656e6f6d223a2275736569227d5d7d5d7d7d5d2c2273657175656e6365223a22313833363533227d',
      'hex',
    ),
  },
]

jest.setTimeout(120000)

describe.each(models)('Transactions', function (m) {
  test.concurrent.each(TEST_DATA)('Sign transaction', async function (data) {
    const sim = new Zemu(m.path)
    try {
      await sim.start({ ...defaultOptions, model: m.name })
      const app = new SeiApp(sim.getTransport())

      const responseAddr = await app.getAddressAndPubKey(ETH_PATH)
      console.log(responseAddr)
      const pubKey = Buffer.from(responseAddr.pubKey, 'hex')

      // do not wait here.. we need to navigate
      const signatureRequest = app.sign(ETH_PATH, data.blob)

      // Wait until we are not in the main menu
      await sim.waitUntilScreenIsNot(sim.getMainMenuSnapshot())
      await sim.compareSnapshotsAndApprove('.', `${m.prefix.toLowerCase()}-sign-${data.name}`)

      const signatureResponse = await signatureRequest
      console.log(signatureResponse)

      expect(signatureResponse).toHaveProperty('s')
      expect(signatureResponse).toHaveProperty('r')
      expect(signatureResponse).toHaveProperty('v')

      const EC = new ec('secp256k1')
      const signature_obj = {
        r: signatureResponse.r!,
        s: signatureResponse.s!,
      }
      // Now verify the signature
      const message = createHash('sha256').update(data.blob).digest()
      const valid = EC.verify(message, signature_obj, pubKey, 'hex')
      expect(valid).toEqual(true)
    } finally {
      await sim.close()
    }
  })

  test.concurrent.each(TEST_DATA)('Sign transaction expert', async function (data) {
    const sim = new Zemu(m.path)
    try {
      await sim.start({ ...defaultOptions, model: m.name })
      const app = new SeiApp(sim.getTransport())

      //Change to expert mode so we can skip fields
      await sim.toggleExpertMode()

      const responseAddr = await app.getAddressAndPubKey(ETH_PATH)
      console.log(responseAddr)
      const pubKey = Buffer.from(responseAddr.pubKey, 'hex')

      // do not wait here.. we need to navigate
      const signatureRequest = app.sign(ETH_PATH, data.blob)

      // Wait until we are not in the main menu
      await sim.waitUntilScreenIsNot(sim.getMainMenuSnapshot())
      await sim.compareSnapshotsAndApprove('.', `${m.prefix.toLowerCase()}-sign-${data.name}-expert`)

      const signatureResponse = await signatureRequest
      console.log(signatureResponse)

      expect(signatureResponse).toHaveProperty('s')
      expect(signatureResponse).toHaveProperty('r')
      expect(signatureResponse).toHaveProperty('v')

      const EC = new ec('secp256k1')
      const signature_obj = {
        r: signatureResponse.r!,
        s: signatureResponse.s!,
        v: signatureResponse.v!,
      }
      // Now verify the signature
      const message = createHash('sha256').update(data.blob).digest()
      const valid = EC.verify(message, signature_obj, pubKey, 'hex')
      expect(valid).toEqual(true)
    } finally {
      await sim.close()
    }
  })
})
